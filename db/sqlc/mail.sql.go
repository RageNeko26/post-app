// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: mail.sql

package db

import (
	"context"
)

const createMail = `-- name: CreateMail :one
INSERT INTO mails (
 title, body, receiver, sender 
) VALUES (
  $1, $2, $3, $4
) RETURNING id, title, body, receiver, sender, created_at
`

type CreateMailParams struct {
	Title    string `json:"title"`
	Body     string `json:"body"`
	Receiver int32  `json:"receiver"`
	Sender   int32  `json:"sender"`
}

func (q *Queries) CreateMail(ctx context.Context, arg CreateMailParams) (Mail, error) {
	row := q.db.QueryRowContext(ctx, createMail,
		arg.Title,
		arg.Body,
		arg.Receiver,
		arg.Sender,
	)
	var i Mail
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.Receiver,
		&i.Sender,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMail = `-- name: DeleteMail :exec
DELETE FROM mails WHERE id = $1
`

func (q *Queries) DeleteMail(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMail, id)
	return err
}

const getMail = `-- name: GetMail :one
SELECT id, title, body, receiver, sender, created_at FROM mails
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMail(ctx context.Context, id int32) (Mail, error) {
	row := q.db.QueryRowContext(ctx, getMail, id)
	var i Mail
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.Receiver,
		&i.Sender,
		&i.CreatedAt,
	)
	return i, err
}

const listMails = `-- name: ListMails :many
SELECT id, title, body, receiver, sender, created_at FROM mails
WHERE receiver = $1
`

func (q *Queries) ListMails(ctx context.Context, receiver int32) ([]Mail, error) {
	rows, err := q.db.QueryContext(ctx, listMails, receiver)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mail
	for rows.Next() {
		var i Mail
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.Receiver,
			&i.Sender,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMail = `-- name: UpdateMail :one
UPDATE mails SET title = $2, body = $3
WHERE id = $1
RETURNING id, title, body, receiver, sender, created_at
`

type UpdateMailParams struct {
	ID    int32  `json:"id"`
	Title string `json:"title"`
	Body  string `json:"body"`
}

func (q *Queries) UpdateMail(ctx context.Context, arg UpdateMailParams) (Mail, error) {
	row := q.db.QueryRowContext(ctx, updateMail, arg.ID, arg.Title, arg.Body)
	var i Mail
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		&i.Receiver,
		&i.Sender,
		&i.CreatedAt,
	)
	return i, err
}
